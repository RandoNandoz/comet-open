---
title: "Using Python"
title-block-banner: false
date: last-modified
published-title: Last Updated
toc: true
---

![](../media/installing_via_Rstudio.png)

This page explains how to set up Python in order to access and use the COMET notebooks. Credit goes to Professor Daniel Chen and the [Mac](https://ubc-dsci.github.io/dsci-310-student/install_instructions/install_stack_mac.html#python-conda-and-jupyterlab) and [Windows](https://ubc-dsci.github.io/dsci-310-student/install_instructions/install_stack_windows.html#python-conda-and-jupyterlab) installation pages. 

## 1. Installing Python

The first thing we'll need to do is install Python onto our computer.

::: panel-tabset

### Windows

1.  Open [the Miniforge Installation Platform](https://conda-forge.org/miniforge/) and select the appropriate link. For Windows users, this will be the Windows artifact.
2.  Once you've downloaded the artifact, you can run the installer and use all of the default options. The install location should look like `C:\Users\YOUR_USER_NAME\miniforge3`. 
3. Next, open the Start Menu and search for “Miniforge Prompt”. When this opens you will see a prompt similar to `(base) C:\Users\your_name`. We'll also check that the Python installation works by running

`python --version`. 
This should return Python 3.11.0 or greater. If it does not, confirm that you are in the (base) environment and update the base python with:

`conda install python=3.11`. 

### MacOS

1.  You'll want to first set your default Terminal shell to `Bash` as opposed to `Zsh`. Open the Terminal ([see this video for help](https://youtu.be/5AJbWEWwnbY)) and type 
`chsh -s /bin/bash`.
The close the Terminal and reopen it (this restarts the Terminal). Now, you should see `Bash` at the top of your Terminal. 
2. Next, open [the Miniforge Installation Platform](https://conda-forge.org/miniforge/) and select the appropriate link. Check your device type by clicking "About This Mac" on the top left of your screen - if your chip is M1, M2,..., download the `arm64` artifact. Otherwise, download the `x86_64` artifact. Make sure that this file is in your `Downloads` folder.
3.  Open the terminal and run the following code: 
`bash ${HOME}/Downloads/Miniforge3.sh -b -p "${HOME}/miniforge3"`. 
You may need to rename the file `Miniforge.sh`. 
4. Now you can run
`source "${HOME}/miniforge3/etc/profile.d/conda.sh"`
`conda activate`
`conda init`. 
5. You should now have access to Python! If the installation was successful, you will see `(base)` in your terminal before your device name and username. To confirm that `conda` is working, run

`conda --version`. 
You should see something like this: `conda 23.5.2`. We will also confirm that Python is working. To do so, run
`python --version`. 
It should return Python 3.11.0. 
If you do not see Python >3.11, close your terminal and open a new one. Confirm that you are in the (base) environment. Then update the base python with:

`conda install python=3.11`.

:::

## 2. Installing the Python Application

We'll now install Python, our IDE of choice.

::: panel-tabset

## Windows

1.  Head to [Python](https://www.python.org/downloads/release/python-3131/) and download the appropriate file (for Windows, this will be one of the `Windows installer` files).
2.  Open the RStudio setup and press `Next` \> `Next` \> `Install`.\

## MacOS

1.  Head to [Python](https://www.python.org/downloads/release/python-3131/), and download the appropriate file. 
2.  Open the Python setup and install.
:::

## 3. Installing package compilers

We'll need to install a package compiler to activate the `renv.lock`, a package bundle made specifically for the COMET notebooks.

::: panel-tabset

## Windows

RTools is a program that allows us to compile R packages from source.

> [Rtools can be installed with link.](https://cran.r-project.org/bin/windows/Rtools/rtools44/files/rtools44-6104-6039.exe)

In the Rtools installer, press `Next` \> `Next` (ensuring that both check boxes are ticked) \> `Install`.

## MacOS

For Mac, you'll need to install *Xcode Command Line Tools* instead.

1.  Open the Mac terminal. To do so, click on the spotlight icon in the menu bar and search for “terminal.”
2.  **Install Homebrew**: Homebrew is a package manager for MacOS which we will use to install Xcode. In the Mac terminal, paste:

`/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"`

This might prompt you to enter your user password, which is the password that you use to sign into your device (Note that for privacy reasons you won't be able to see the characters that you type). Once you've entered your password, press `enter`. This may take a while to run.

3. You should get an output similar to this:

![](../media/homebrew.png)

Notice the warning. To fix this, we'll need to add our installation to the system path. In the terminal, run:

`(echo; echo 'eval "$(/opt/homebrew/bin/brew shellenv)"') >> ~/.zprofile`

followed by:

`eval "$(/opt/homebrew/bin/brew shellenv)"`

which will add the required path to the installation.

4.  **Verify installations:** to check that Xtools is installed, run `$ brew doctor` in the termial. This should display the output *"Your system is ready to brew."*

:::

## 4. Downloading and opening the COMET notebooks

### 4.1. Downloading the COMET notebooks

1.  Open [comet.arts.ubc.ca](https://comet.arts.ubc.ca/) and, in the top right corner, select `Launch Comet` \> `Launch Locally`. This will download a .zip file to your computer.
2.  Open the file in file explorer and extract the zip folder to your preferred destination.

## 4.2. Importing the COMET notebooks into RStudio

We can now import the COMET notebooks into RStudio. When we say "import", what we really mean is setting the **working directory**. The working directory is the location in your computer where you are working in. Unlike VSCode and other high-level IDEs, setting our working directory is done manually by specifiying our location using the R console.

1.  Locate the downloaded COMET notebooks and copy the *absolute file path* by right-clicking on the folder and pressing `copy as path`. If you are on a Mac, hold the option key and select `Copy (file name) as Pathname`.
2.  Locate the current working directory in RStudio by entering `getwd()` in the R console (bottom left of the screen).

![The output should look something like this on windows, but won't necessarily give the same file path.](../media/Rstudio_getwd.png)

3.  We'll now set our working directory to the COMET folder. To do so, enter the following command into the console:

`setwd("C:/your/file/path/goes/here")`

Where "C:/your/file/path/goes/here" is the absolute file path you copied earlier, **with the backshashes (\\) set to forward slashes (/)**. For example, the file path (on windows) `C:\users\i_love_econ` will be changed to `C:/users/i_love_econ`.

::: callout-warning

RStudio requires file paths to have a forward slash instead of a back slash. If you don't adjust the absolute file path accordingly, you won't be able to set/change your working directory.

:::

To check that you've got the right working directory, run `getwd()` again.

### 4.3. Changing your working directory in the files tab.

On the right-hand bottom side of Rstudio there is a display that shows your files. If you'd like to change it to your current working directory, press the small button `...` button called "go to directory". This will allow you to pick the COMET modules folder from your file system and navigate it from within R.

![](../media/Changing_files.png)

## 5. Activating the COMET environment

We're now ready to activate the COMET environment in RStudio.

1.  In the R console, enter the following line of code: `install.packages("renv")`. This will install the `renv` package, which will allow RStudio to read the custom environment file for the notebooks.

2.  In the R console, run `renv::restore()`. You should get a message that reads: *"It looks like you've called renv::restore() in a project that hasn't been activated yet. How would you like to proceed?"*. Press `1`. This should restart R. If it doesn't, run `renv::activate()`.

3.  To check that everything is installed properly, run `renv::status()`. This command will give you a the list of packages in your environment (Note that this might take some time to run).